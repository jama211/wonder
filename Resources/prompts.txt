I'm planning on making a game, and I want to give you some context first. I want to make a game in c# (making sure to use mono-compatible libraries only for later cross compatibility) that starts with a text based adventure with a green and black retro style text interface. Later though, it will turn into a platformer in place - that means it will be a platformer where you are made of text-like elements and also the platforms etc will be text elements - in fact, the platforms etc will be made out of text. whilst at first it will be typing only, I will later have commands like "look" show the current room layout with words describing what they are but in the physical locations that will be on the screen for the platformer to work with. In fact, I may also have a top down/angled isometric view and have the player walk around the worded objects in the room and interact with them... 

Anyway, I'm getting ahead of myself. Let's start small. Please remember the contexct above, and then make me a basic program that opens a window filled with fake boot-up style green text on a black background that we can use as the starting point for a game. Once it's "booted" it needs to present some initial text (insert anything placeholder for now) and then allow a text input field for the user. 


... 


yo. we're back.  so, stage 2 is I want the game to seemlessly transition from a text based adventure to an isometric view. here's some guidelines
- Add a description to MainScreen that says you find yourself in a room would you like to look around? Though, feel free to tart up this language a little bit. 
- Add a new command called look which should return a description of the room, make sure there's some stuff in there like a door, a table, a fridge, I dunno a few other things whatever you feel like - and ask the user if they would like to "look harder"
- The next stage is to add a command "look harder" which when they do so we transition to another screen, contained within a new screen file, which will be an isometric view made entirely of ascii characters, where the player is an @ symbol (a reference to the mines of moria) and all the objects are placed in the room - but the objects are made of the word that describes them. E.g, to represent a bed, you'd just have the word bed somewhere on the screen. The arrow keys (or WASD) will walk the player around the room. try and represent the floor and the walls of the room with dots and lines or whatever, but have the door be the represented by the word door (but vertical, of course). 
- Make sure your player collides with worded objects 

...

I'd like a few refinements: 
- Pressing escape in isometric view should return you to the text prompt screen
- Some simple instructtions at the top of the screen in isometric view should tell you that you can press escape to go back to the other view, and that you can press E to interact 
- if I'm colliding with an object such as a table, I should still be able to move in directions other than towards it, so I can "slide" along the outside of it 
- The door should be at the edge of the room somewhere, as doors are usually on walls 
- Make the text that comprises the objects in the room larger to match the shape of the object, i.e. the table should be taller to make the word TABLE more square 
- dots for the floot shouldn't show through named objects 
- the lightglobe should exist in the room 
- add some more things in the room for fun, something silly along with some normal things 
- The player should collide with the walls so they cannot walk outside the room bounds 

...

Hi there! Currently, isometricscreen has everything for the scene inside of it. In the future, there will be many screens like this one, each representing rooms and doors that if you interact with a door it moves you to another screen that is defined somehow also. So, we need a folder to store rooms in, each with files to store the rooms info, and isometric screen should instead be a manager that hosts whatever screen you're in, manages transitions between them, and houses the base logic for handling interactions and showing the instructions etc. Can we make this change, and can you also mane ke three more example rooms, numbered in order, that you can navigate through each time you interact with the adjoining door? Keep in mind all apart from the first and last room you'll need two doors, so you can go forwards and backwards, and you should put items in every room. Oh, and have descriptions for the objects in each room that it shows you the description text of at the bottom if you interact with them. Oh, and make the banana curved by moving the letter positions so it represents a banana. 

...

I think I'd like a room editor. This is going to be a complicated task, so when you're done, make me a PR so I can review. If, inside any isometric room, I press "p", it should open a new window that is a point and click application that shows the room, except there should be draggable points around each room object. If I click and hold on the center of an object, I can move it with the mouse and place it down anywhere. If I pull on the corners, I can change it's size. in the case of the banana, you should add a bounding box around the whole thing that updates each letter accordingly to scale. This window should have a "revert" button, that reverts all changes, and a "save" button (with confirm dialogue) - that saves the changes to the relevant room's json file. if closed, the game will re-load the existing level accordingly. And you know what? add any other quality of life features you think I'd like. At least 3. 




---- 

other sessions were made... 

----






Hi! This is the final session for my project. Everything is working up through Room 3, including the dragon puzzle, the text mode transitions, and the end-of-game text sequence after the player exits the final room. I’ve also already handled testing, bugfixing, and the README separately, so this last prompt is focused on wrapping up with two small final polish items:

---

1. End Text Additions  
At the very end of the game (after the final message that shows up when the player defeats the dragon and exits the final room), add the following lines:

Thanks for playing.  
Type `exit` to quit the simulation.

This should appear *after* the current final message:
CONNECTION LOST.  
TERMINAL CORRUPTION DETECTED.  
Thank you for participating in System Glitch: Episode 0.

So the full ending should look like this:

CONNECTION LOST.  
TERMINAL CORRUPTION DETECTED.  
Thank you for participating in System Glitch: Episode 0.  
Thanks for playing.  
Type `exit` to quit the simulation.

---

2. Optional Flavor Text Enhancements  
Add a few extra optional flavor messages that randomly trigger while the player is walking around in RPG mode (any room). These should be brief, weird, or silly thoughts that add texture to the experience. Use your judgment to insert them at low frequency (e.g. once every 10–20 steps). Examples:

- You feel like someone is watching… but from inside your pancreas.
- The word “lunch” drifts through your head, uninvited.
- You step on something. It apologizes.
- Somewhere, a duck sneezes. You know this with certainty.

Feel free to add more lines in this style.

---

Please implement these last two enhancements. Once done, this project is complete. Well, complete in the sense that it is completable, I have some bugs for you to fix next probably but we can in our heads call this version 0.1. Thank you! 
